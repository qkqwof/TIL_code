package com.encore.emp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.encore.emp.domain.EmployeeDto;
import com.encore.emp.service.EmpService;

@RestController
@RequestMapping("api")
@CrossOrigin(origins= {" * "}, maxAge = 6000)
public class EmployeeController {

	@Autowired
	private EmpService service;
	
	@GetMapping("findAllEmployees")
	public ResponseEntity<List<EmployeeDto>> findAllEmployees() throws Exception {
		List<EmployeeDto> emps = service.findAllEmployees();
		
		if(emps.isEmpty()) return new ResponseEntity<List<EmployeeDto>>(HttpStatus.NO_CONTENT); //사원이 없다면..isEmpty
		return new ResponseEntity<List<EmployeeDto>>(emps, HttpStatus.OK);
	}
	
	/*
	 * 2. getEmployeesTotal : 모든 사원의 총 인원수를 반환한다.
	 * 3. findEmployeeById  : 사원 아이디로 사원의 정보를 찾는다.
	 * 4. findLikeEmployees : 특정한 이름이 들어간 사원을 찾는다.
	 * 5. findEmployeeByManagerId : 특정한 매니저에 소속된 사원들을 찾는다.
	 * 6. addEmployee       : 특정한 사원을 추가한다.
	 * 7. updateEmployee    : 사원의 정보를 수정한다.
	 * 8. deleteEmployee    : 해당 사원의 정보를 삭제한다.
	 *  
	 * ---> PostMan Tool을 사용해서 로직들이 잘 작성되었는지 확인하시기 바랍니다.
	 * 
	 */
	
	//2. getEmployeesTotal : 모든 사원의 총 인원수를 반환한다.
	@GetMapping("getEmployeesTotal")
	public ResponseEntity<Integer> getEmployeesTotal() throws Exception {
		int total = service.getEmployeesTotal();
		if(total==0) return new ResponseEntity<Integer>(HttpStatus.NO_CONTENT);
		return new ResponseEntity<Integer>(total, HttpStatus.OK);
	}
	
	//3. findEmployeeById  : 사원 아이디로 사원의 정보를 찾는다.
	@GetMapping("findEmployeeById/{id}")
	public ResponseEntity<EmployeeDto> findEmployeeById(@PathVariable int id) throws Exception {
		EmployeeDto emp = service.findEmployeeById(id);
		
		if(emp==null) return new ResponseEntity<EmployeeDto>(HttpStatus.NO_CONTENT);
		return new ResponseEntity<EmployeeDto>(emp, HttpStatus.OK);
	}
	
	//4. findLikeEmployees : 특정한 이름이 들어간 사원을 찾는다.
	@GetMapping("findLikeEmployees/{name}")
	public ResponseEntity<List<EmployeeDto>> findLikeEmployees(@PathVariable String name) throws Exception {
		List<EmployeeDto> emps = service.findLikeEmployees(name);
		
		if(emps.isEmpty()) return new ResponseEntity<List<EmployeeDto>>(HttpStatus.NO_CONTENT); //사원이 없다면..isEmpty
		return new ResponseEntity<List<EmployeeDto>>(emps, HttpStatus.OK);
	}
	
	//5. findEmployeeByManagerId : 특정한 매니저에 소속된 사원들을 찾는다.
	@GetMapping("findEmployeeByManagerId/{managerId}")
	public ResponseEntity<List<EmployeeDto>> findEmployeeByManagerId(@PathVariable int managerId) throws Exception {
		List<EmployeeDto> emps = service.findEmployeesByManagerId(managerId);
		
		if(emps.isEmpty()) return new ResponseEntity<List<EmployeeDto>>(HttpStatus.NO_CONTENT); //사원이 없다면..isEmpty
		return new ResponseEntity<List<EmployeeDto>>(emps, HttpStatus.OK);
	}
	
	//6. addEmployee       : 특정한 사원을 추가한다.
	@PostMapping("addEmployee")
	public ResponseEntity<EmployeeDto> addEmployee(@RequestBody EmployeeDto dto) throws Exception {
		service.addEmployee(dto);
		return new ResponseEntity<EmployeeDto>(HttpStatus.OK);
	}
	
	//7. updateEmployee    : 사원의 정보를 수정한다.
	@PutMapping("updateEmployee")
	public ResponseEntity<EmployeeDto> updateEmployee(@RequestBody EmployeeDto dto) throws Exception {
		boolean result = service.updateEmployee(dto);
		
		if(!result) return new ResponseEntity<EmployeeDto>(HttpStatus.NO_CONTENT);
		return new ResponseEntity<EmployeeDto>(HttpStatus.OK);
	}
	
	//8. deleteEmployee    : 해당 사원의 정보를 삭제한다.
	@DeleteMapping("deleteEmployee/{id}")
	public ResponseEntity<EmployeeDto> deleteEmployee(@PathVariable int id) throws Exception {
		boolean result = service.deleteEmployee(id);
		
		if(!result) return new ResponseEntity<EmployeeDto>(HttpStatus.NO_CONTENT);
		return new ResponseEntity<EmployeeDto>(HttpStatus.OK);
	}
}
